import java.util.*;

class Order {
	String orderName;
	public Order (String string) {
		this.orderName = string;
	}
}

class OrderDependency{
	Order cur;
	Order pre;
	public OrderDependency(Order pre, Order cur) {
		this.pre = pre;
		this.cur = cur;
	}
}

public class Solution {

	public static List<Order> solution(List<OrderDependency> orderDependencies) {
		//拿来输出
		List<Order> result = new ArrayList<>();
		//接下来所有的key都保持的是string， orderName， 这样直接避免重复输出
		//计算入度
		Map<String, Integer> inMap = new HashMap<>();
		//计算出度，就是一个Order指着多少个其他的Order
		Map<String, List<String>> outMap = new HashMap<>();
		//这个负责记录，记录orderName和Order的关系
		Map<String, Order> recordMap = new HashMap<>();
		//这个负责去掉重复
		Set<String> set = new HashSet<>();
		
		//下面开始吧硅胶填入到这些map或者是set里面，使其丰满
		//这里注意要仔细就行，别漏东西
		for (OrderDependency od : orderDependencies) {
			Order pre = od.pre;
			Order cur = od.cur;
			String preName = pre.orderName;
			String curName = cur.orderName;
			set.add(preName);
			set.add(curName);
			
			//先㩙好string和Order的map
			if (!recordMap.containsKey(preName)) {
				recordMap.put(preName, pre);
			}
			if (!recordMap.containsKey(curName)) {
				recordMap.put(curName, cur);
			}
			
			//先做好入度
			if (!inMap.containsKey(preName)) {
				inMap.put(preName, 0);
			}
			if (inMap.containsKey(preName)) {
				inMap.put(curName, inMap.get(curName) + 1);
			}
			else {
				inMap.put(curName, 1);
			}
			
			//再做一下出度
			
		}
		
		return result;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Order o1 = new Order("泡面");
		Order o2 = new Order("泡面");
		Order o3 = new Order("SF");
		Order o4 = new Order("租车");
		Order o5 = new Order("SF");
		Order o6 = new Order("泡面");
		Order o7 = new Order("租车");
		Order o8 = new Order("SF");
		Order o9 = new Order("爽（每个行为之输出了一次对吧）");
		OrderDependency od1 = new OrderDependency(o1, o3);
		OrderDependency od2 = new OrderDependency(o2, o7);
		OrderDependency od3 = new OrderDependency(o3, o9);
		OrderDependency od4 = new OrderDependency(o4, o3);
		OrderDependency od5 = new OrderDependency(o6, o9);
		OrderDependency od6 = new OrderDependency(o8, o9);
		OrderDependency od7 = new OrderDependency(o2, o5);
		
		List<OrderDependency> list = new ArrayList<>();
		list.add(od1);
		list.add(od2);
		list.add(od3);
		list.add(od4);
		list.add(od5);
		list.add(od6);
		list.add(od7);
		
		List<Order> res = solution(list);
		for (int i = 0; i < res.size(); i++) {
			System.out.println(res.get(i).orderName);
			if (i + 1 < res.size()) {
				System.out.print(" -> ");
			}
		}
	}

}
